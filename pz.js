// Условие задания
// Функция чтения данных из файла

// Напишите функцию readFileContent(path), которая принимает путь к файлу в качестве аргумента и возвращает содержимое файла в виде строки.

// Используйте синхронный метод fs.readFileSync из стандартного модуля Node.js fs.

// Требования:

// Если файл существует, функция должна вернуть его содержимое как строку.

// Если файл не найден, выбрасывайте ошибку с сообщением: "Файл не найден".

// Если содержимое файла не является валидным JSON, выбрасывайте ошибку с сообщением: "Некорректный формат данных".

// Функция записи данных в файл

// Напишите функцию writeFileContent(path, content), которая принимает путь к файлу и данные, которые нужно записать в файл.

// Используйте синхронный метод fs.writeFileSync из стандартного модуля Node.js fs.

// Требования:

// Функция должна записывать данные в файл по указанному пути.

// Если при записи происходит ошибка (например, отсутствуют права на запись), выбрасывайте ошибку с сообщением: "Ошибка записи в файл".

// Если данные в файле должны быть в формате JSON, сериализуйте их в строку с помощью JSON.stringify().

// Тестирование

// Напишите тесты для каждой из функций с использованием Jest.

// Тесты для функции readFileContent:

// Тест на успешное чтение содержимого файла. Мокируйте метод fs.readFileSync и проверьте, что функция возвращает правильное содержимое.

// Тест на ошибку при отсутствии файла (например, ошибка с кодом ENOENT). Проверьте, что выбрасывается ошибка с правильным сообщением.

// Тест на некорректный формат данных (например, некорректный JSON). Убедитесь, что выбрасывается ошибка с правильным сообщением.

// Тесты для функции writeFileContent:

// Тест на успешную запись данных в файл. Мокируйте метод fs.writeFileSync и проверьте, что функция корректно записывает данные в файл.

// Тест на ошибку записи (например, отсутствие прав). Проверьте, что выбрасывается ошибка с правильным сообщением.

// Тест на запись данных в формате JSON. Убедитесь, что данные корректно сериализуются и записываются в файл.

// Дополнительные условия
// Мокирование: Для тестов используйте мокирование функций fs.readFileSync и fs.writeFileSync с помощью Jest.

// Асинхронность: Все операции должны быть синхронными. Если вы хотите сделать задание более сложным, перепишите функции и тесты, чтобы они использовали асинхронные методы (fs.promises.readFile и fs.promises.writeFile).

// Ошибки: Убедитесь, что ошибки правильно обрабатываются и выбрасываются с нужными сообщениями.

// Формат данных: При записи в файл, если данные должны быть в формате JSON, используйте метод JSON.stringify().

// Рекомендации по выполнению задания:
// Мокирование файловой системы: Для того чтобы не работать с реальными файлами в тестах, используйте возможности Jest для мокирования методов файловой системы. Это позволит вам тестировать логику без зависимости от реальной файловой системы.

// Тестирование ошибок: Особое внимание уделите тестированию обработки ошибок, так как работа с файлами может привести к различным исключениям (например, отсутствие прав или отсутствие файла).

// Покрытие тестами: Напишите тесты для каждого важного случая (успешный сценарий, ошибки, некорректные данные).